@inject IConfiguration _config
@using System.Security.Principal
@using System.Security.Claims;

@{
    var i = User.Identity as ClaimsIdentity;
    // show auth provider, except Federation
    string provider = EligereRoles.Provider(User, null) ?? "";
    if(!String.IsNullOrEmpty(provider))
    {
        if (provider == Constants.Federation)
            provider = "";
        else
            provider = "[" + provider + "]";
    }
    bool showLogoutLink = EligereRoles.LogoutEnable(User, _config);
}

<ul class="navbar-nav">
    @if (User.Identity.IsAuthenticated)
    {
        <li class="nav-item">
            <span class="navbar-text text-dark">
                @EligereRoles.UserDisplayName(User)
                <text>
                    (@(EligereRoles.UserId(User)) @provider)
                </text>
            </span>
        </li>
        <li class="nav-item">
        @* 
        TODO: verify logout url
        *@
            @if(showLogoutLink)
            {
                if (EligereRoles.Provider(this.User, null) == Constants.Spid)
                {
                    <a class="nav-link text-dark" asp-controller="Home" asp-action="SpidLogout">Disconnetti</a>
                }
                else
                {
                    <a class="nav-link text-dark" asp-area="MicrosoftIdentity" asp-controller="Account" asp-action="SignOut">Disconnetti</a>
                }
            } else
            {
                <a class="nav-link text-dark" asp-controller="Home" asp-action="Logout">Disconnetti</a>
            }
        </li>
    }
    else
    {
        <li class="nav-item">
            <!--
            <a class="nav-link text-dark" asp-area="MicrosoftIdentity" asp-controller="Account" asp-action="SignIn">Accedi</a>
            -->
        </li>
    }
</ul>
